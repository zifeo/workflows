name: Test and release

on:
  workflow_call:
    inputs:
      python-matrix:
        required: true
        type: string
      poetry-version:
        required: true
        type: string
      poetry-install-extra-args:
        required: false
        type: string
        default: ""
      python-version:
        required: true
        type: string
      pytest-args:
        required: false
        type: string
        default: ""
      compose:
        required: false
        type: string
        default: ""
      docker-build:
        required: false
        type: boolean
        default: false
      docker-platform:
        required: false
        type: string
        default: linux/amd64
      publish-docker:
        required: false
        type: boolean
        default: false
      publish-pypi:
        required: false
        type: boolean
        default: false
    secrets:
      pypi-token:
        required: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJSON(inputs.python-matrix) }}

    steps:
      - name: Check out
        uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ inputs.poetry-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          poetry install ${{ inputs.poetry-install-extra-args }}
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
      - name: Start containers
        if: inputs.compose != ''
        run: docker compose -f ${{ inputs.compose }} up -d
      - name: Run tests
        run: |
          poetry run pytest -s tests ${{ inputs.pytest-args }}
      - name: Stop containers
        if: always() && inputs.compose != ''
        run: |
          docker compose -f ${{ inputs.compose }} down
      - name: Build docker image
        if: inputs.docker-build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: ${{ inputs.docker-platform }}
          push: false
          tags: test
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}

  release-check:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      release: ${{ steps.check.outputs.release }}

    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ inputs.poetry-version }}
      - name: Check release
        id: check
        run: |
          PACKAGE="$(poetry version)"
          NAME=${PACKAGE% *}
          VERSION=${PACKAGE#* }
          ALREADY_RELEASED=$(curl -s https://pypi.org/pypi/$NAME/json | jq ".releases | keys | any(. == \"$VERSION\")")
          echo "::set-output name=release::$([[ "$ALREADY_RELEASED" == "true" ]] && echo "" || echo $VERSION)"

  release:
    needs: release-check
    runs-on: ubuntu-latest
    if: needs.release-check.outputs.release != ''

    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ inputs.poetry-version }}
      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build docker image
        if: inputs.docker-build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: ${{ inputs.docker-platform }}
          push: false
          tags: ghcr.io/${{ github.repository }}:${{ needs.release-check.outputs.release }}
          build-args: |
            PYTHON_VERSION=${{ inputs.python-version }}
      - name: Publish to PyPI
        if: inputs.publish-pypi
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.pypi-token }}
        run: |
          python -m pip install --upgrade pip
          poetry install ${{ inputs.poetry-install-extra-args }}
          poetry build
          poetry publish
      - name: Push to Github Packages
        if: inputs.publish-docker
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ needs.release-check.outputs.release }}
      - name: Tag
        # https://github.com/actions-ecosystem/action-push-tag/issues/10#issuecomment-1098206676
        run: |
          tag=v${{ needs.release-check.outputs.release }}
          message=''
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${tag}" -m "${message}"
          git push origin "${tag}"
      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ needs.release-check.outputs.release }}
          tag_name: v${{ needs.release-check.outputs.release }}
          body: |
            See [changelog](https://github.com/${{ github.repository }}/blob/v${{ needs.release-check.outputs.release }}/CHANGELOG.md).
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
